### Larger Testing의 정의

---

작은 테스트는 단일 스레드나 단일 프로세스만 사용할 수 있고, 중간 크기 테스트는 단일 기기만 사용하도록 제한된다. 테스트가 커질수록 이런 제약들이 하나씩 풀리고, 구글은 테스트 범위라는 개념을 사용한다.

### 존재이유

---

1) 더 큰 테스트가 존재하는 첫 번째 이유는 충실성을 높이기 위함이다. 

테스트의 충실성이 높아지면 테스트 대상의 실제 행위를 더 잘 반영할 수 있다. 하지만 충실성이 높아질수록 비용이 켜져 테스트 실패 시 입는 손해도가 크기 때문에 더 큰 테스트의 핵심은 단위 테스트와 프로덕션 사이에서 가장 적합한 지점을 찾아내는 것이다.

2) 두 번째 이유는 작은 테스트가 해낼 수 없는 영역이라면 자연스럽게 더 큰 테스트가 필요하기 때문이다. 

단위 테스트로는 위험 요인을 충분히 해소하기 어려운 대표적인 영역 다섯가지는 다음과 같다.

1. 부정확한 테스트 대역
2. 설정 문제
3. 과부하 시 나타나는 문제
4. 예기치 못한 동작, 입력, 부작용
5. 창발적 행위와 진공 효과

### 사용하는 이유

---

단위 테스트는 개별 함수, 객체, 모듈에 대한 확신을 심어주지만 더 큰 테스트들은 시스템 ‘전체’가 의도대로 동작한다는 확신을 더해주는 역할을 한다. 또한 수동 테스트와 달리 자동화해두면 다양하게 확장할 수 있다.

### 더 큰 데스트를 만들지 못하는 이유

---

대규모 변경을 진행하는 사람들이 연관된 팀들의 테스트 모두의 수행 방법을 파악하도록 하는 방식은 확장성이 떨어진다. 더 큰 테스트는 팀마다 구현 방식이 다르기 때문에 이 팀들의 제품을 통합해 테스트하려면 먼저 호환되지 않는 인프라들부터 통합해야 한다. 이처럼 표준화가 잘 이뤄지지 않아서 신규 직원에게, 혹은 훨씬 숙련된 엔지니어에게조차 단일한 테스트 방식을 가르칠 수 없다. 잘 관리하지 못하면 이 상황이 계속 고착되고, 더 큰 테스트가 필요한 이유를 이해시키는 데 방해가 된다.

### 구글의 더 큰 자동화 테스트

---

어떤 테스트가 가장 적합한지는 코드의 기대 수명에 따라 달라진다. 단위 테스트는 기대 수명이 몇 시간 이상만 되면 충분한 가치가 있다. 수명이 더 길어지더라도 수동 테스트가 사라지진 않는다.

더 큰 테스트들은 모두 수명이 더 긴 소프트웨어에 유용하다. 하지만 수명이 길어질수록 주 관심사가 테스트의 유지보수로 옮겨진다. (테스트 피라미드 → 아이스크림 콘 테스트 안티패턴)

> **테스트 피라미드 : 단위 테스트 → 통합 테스트 → UI테스트**
> 

개발 초기에 코드가 몇 분 정도만 쓰이고 사라질 거라 판단하여 수동 테스트에 의존하면 수동테스트들이 누적되어 초기 테스트 포트폴리오 전체를 지배하게 된다.

건강한 상태를 유지하는 핵심은 개발 시작 후 며칠 안으로 단위 테스트를 만들어 테스트 피라미드를 쌓기 시작하는 것이다. 그런 다음 수동으로 수행하던 종단간 테스트를 자동화된 통합 테스트로 대체해 피라미드 위층으로 올린다. 구글은 코드를 서브밋하려면 반드시 단위 테스트를 포함하도록 규정하여 해결했다. 오랫동안 코드를 건강하게 유지하려면 단위 테스트와 수동 테스트 사이의 간극을 매우는 데 소홀해서는 안된다.

### 큰 테스트의 구조

---

1. 테스트 대상 시스템
    
    1) 대규모 테스트의 핵심은 테스트 대상 시스템(SUT)이다. 일반적인 단위 테스트는 클래스 하나나 모듈 하나에 집중한다. 그뿐만아니라 테스트 코드와 테스트 대상 코드가 같은 프로세스에서 실행된다. 반면 대규모 테스트에서의 SUT는 대체로 사정이 많이 달라서 하나 이상의 독립된 프로세스에서 수행된다.
    
    2) SUT의 형태는 밀폐성과 충실성에 의해 결정된다. 밀폐성이란 SUT는 현재 테스트하려는 기능과 관련 없는 구성요소를 사용하거나 상호작용하지 못해야한다. 밀폐성이 높은 SUT는 동시성 문제나 불규칙한 인프라로부터 영향을 적게 받는다. 충실성이란 SUT는 테스트 중인 프로덕션 시스템을 충실히 반영해야한다. 충실성이 높은 SUT는 프로덕션 버전과 유사한 바이너리로 구성된다. 
    
    밀페성과 충실성이 충동할 때가 많다. 어떻게 충동하는지 확인은 3)에서 하면된다. 
    
    3) 구글에는 다양한 형태의 SUT가 존재한다.
    
    - 단일 프로세스 SUT
    - 단일 머신 SUT
    - 다중 머신 SUT
    - 공유 환경(스테이징과 프로덕션)
    - 하이브리드
2. 테스트 데이터
    
    테스트에는 데이터가 필요하고, 대규모 테스트라면 두 가지 데이터가 필요하다. 
    
    1) 시드 데이터 : 테스트 개시 시점의 SUT 상태를 반영하여 SUT를 사전초기화해주는 데이터
    
    2) 테스트 트래픽 : 테스트 수행 과정에서 SUT로 보내는 데이터
    
    3) SUT가 독립적으로 실행되고 크기 때문에 SUT의 상태를 테스트 전에 초기화해두는 작업은 대체로 단위 테스트에서 수행하는 셋업보다 훨씬 복잡하다. (예, 도메인 데이터, 현실적인 기준선, 데이터 기록 API)
    
    4) 데이터는 다음과 같이 다양한 방식으로 생성 가능
    
    - 손수 가공한 데이터
    - 복사한 데이터
    - 샘플링한 데이터
3. 검증
    
    1) 수동 검증
    
    2) 단정문 
    
    3) A/B 비교
    

### 더 큰 테스트의 유형

---

테스트 종류가 많은 만큼 가능한 조합도 많다. 그렇다면 어떤 테스트를 언제 수행할지를 어떻게 관리할까? 구글은 소프트웨어 설계의 일환으로 테스트 계획의 초안도 작성한다. 그리고 이 계획의 핵심은 어떤 테스트가 필요하고 각각의 테스트를 얼마나 많이 수행해야 하는지에 관한 개략적인 전략 확립이다. 테스트 전략은 주요한 위험 요소를 찾고, 찾아낸 위험 요소들을 완화해주는 테스트 방식을 정하는 것이다. 

SUT, 데이터, 검증 방법들을 조합하면 다양한 형태의 큰 테스트를 만들어낼 수 있다. 유형별로 어떤 위험을 완화해주는지, 작성, 유지, 디버그에 드는 노력은 어느 정도인지, 실행 비용이 얼마나 되는지 등의 특성이 달라진다. 다음 목록은 구글에서 사용하는 큰 테스트의 종류이다.

- 하나 이상의 바이너리에 대한 기능 테스트
- 브라우저와 기기 테스트
- 성능, 부하, 스트레스 테스트
- 배포 설정 테스트
- 탐색적 테스팅
- 사용자 평가

### 큰 테스트와 워크플로

---

- 테스트들이 계속 정상 수행되도록 유지해야 한다.
- 포스트서브밋 단계에서 큰 테스트들을 자동 수행하는 별도의 지속적 빌드를 갖춰야 한다.
- 개발자의 고통과 늦어지는 변경 반영 시간과 지속적 빌드의 신뢰성 사이에서 절충점을 찾아야 한다.

### 큰 테스트 작성하기

---

큰 테스트의 구조는표준화가 제법 잘 되어 있지만 실제로 구현하는 데는 여전히 어려움이 있다. 큰 테스트를 작성할 때 가장 좋은 방법은 명확한 라이브러리, 문서자료, 예시 코드를 참조하는 것이다. 구글은 단위 테스트에서 쓰는 단정문 라이브러리를 기능 통합 테스트에서도 쓴다. 하지만 SUT와의 상호작용,  A/B테스트, 테스트용 시드 데이터 생성, 테스트 워크플로 조직 등에 필요한 라이브러리들도 시간을 들여 따로 구축해야한다.

### 큰 테스트 수행하기

---

**1) 가능하다면 우리는 더 큰 테스트들을 엔지니어에게 친숙한 방식으로 수행하려 노력한다.** 구글의 프리서브밋 인프라는 비표준 테스트와 TAP테스트 모두에서 쓸 수 있는 공통 API를 제공한다. 코드 리뷰 인프라 역시 두 테스트의 결과를 모아 함께 보여준다. 하지만 많은 큰 테스트가 맞춤형으로 수행되어야 하므로 필요하면 실행 방법을 기술한 문서자료가 따로 필요하여, 익숙하지 않은 엔지니어들을 좌절시킬 것이다.

**2) 엔지니어들은 느린 테스트를 기다려주지 않는다.** 테스트가 느릴수록 엔지니어가 테스트를 수행하는 빈도가 줄어들어 실패하는 테스트가 나와도 수정되어 성공으로 바뀌기까지의 시간이 길어진다. 테스트의 속도를 높이는 가장 좋은 방법은 테스트 범위를 줄이거나 더 작은 테스트로 나눠 병렬로 수행하는 것이다. 따라서 테스트들도 실제 이용자와 동일하게 작성하는게 가장 좋다.

**3) 불규칙한 결과에서 벗어나야 한다**. 불규칙한 결과는 단위 테스트에서도 당연히 나쁘지만 더 큰 테스트에서 나타난다면 테스트 자체를 활용하기 어렵게 한다. 담당 팀은 불규칙성을 제거하는 업무의 우선순위를 높여 대응해야한다. 불규칙성을최소화하려면 가장 먼저 테스트 범위를 줄여야 한다. 그리고 때에 따라서 테스트 속도와 불규칙한 결과 사이에서 절충점(시스템이 최종 사용자가 감내할 수 있는 수준에서 동작하면서 불규칙한 테스트도 제대로 수행)을 찾아야 한다.

**4) 이해되는 테스트를 만들어야 한다.** 테스트 엔지니어가 이해할 수 없는 결과를 낳는 테스트는 개발자 워크플로에 통합하기가 특히 더 어렵다. 더 큰 테스트에서라면 해결하기 불가능한 혼란을 일으키기도 한다. 단정문을 사용하는 테스트라면 성공/실패 여부를 명확히 알려줘야 하며, 실패의 원인을 쉽게 분류해낼 수 있도록 믜리 있는 오류 메시지를 출력해줘야 한다. A/B 테스트처럼 사람이 판단해야 하는 테스트라면 특별한 처리가 필요하다. 그렇지 않으면 프리서브밋 테스트에서 무시하고 건너뛸 위험이 있다.

### 큰 테스트 소유권

---

더 큰 테스트에는 반드시 소유자가 문서로 기록되어 있어야 한다. 여기서 소유자란 테스트가 변경될 때 검토해주고 테스트가 실패했을 때 지원해줄 수 있는 사람을 뜻한다. 소유권이 불분명하면 다음과 같은 희생을 치르게 된다. 

- 기여자가 테스트를 수정하거나 개선하기가 더 어려워진다.
- 테스트 실패 시 해결되기까지 더 오래 걸린다.

특정 프로젝트의 구성요소들을 검증하는 통합 테스트라면 소유권은 프로젝트 리드가 맡아야 한다.  소유자가 누구든 테스트의 전반적인 건실성을 보장하고 유지보수를 지원하고 보상을 줄 수 있는 구넣낭르 모두 갖춘 사람이어야 한다. 

소유권 정보가 잘 구조화되어 기록되어 있다면 테스트 소유자를 중심으로 자동화 시스템을 구축할 수 있다. 구글에서 사용하는 방법은 다음과 같다.

- 일반적인 코드 소유권
- 테스트별 애너테이션

### 마무리

---

단위 테스트가 다루기 어려운 문제를 검증해주는 더 큰 테스트가 종합적인 테스트에 필요하다. 이런 테스트는 필연적으로 더 복잡하고 더 느리다. 따라서 소유자 관리, 유지보수, 적시에 수행되고 있는지 등에도 더 신경을 써야한다. 

더 큰 테스트도 작게 만들어서 개발자 워크플로에 부드럽게 녹여야 하며, 시스템의 위험 요소를 찾아내는 종합적인 테스트 전략과 이를 뒷받침하는 더 큰 테스트는 대부분의 소프트웨어 프로젝트에 반드시 필요하다.
